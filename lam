table lam   | eval no = seq()    | sort - no    | parse lamParser    | fields - line    | eval MERGED_PARAM= replace(MERGED_PARAM, "[", ""), MERGED_PARAM= replace(MERGED_PARAM, "]", ""), MERGED_PARAM= replace(MERGED_PARAM, " ", "")    | eval MERGED_PARAM= split(MERGED_PARAM, ",")    | fields MERGED_PARAM  | search  MERGED_PARAM != "null"     |# search MERGED_PARAM == "\\W+"  | explode MERGED_PARAM  | rex field=MERGED_PARAM "(?<MSEC>\S+)@(?<PARAM_NAME>\S+)\=(?<PARAM_VALUE>\S+)" | search MSEC !="---" and PARAM_NAME !="---"  | eval MSEC = int(MSEC)  | eval key=1  | join key  [ table lam | eval no = seq() | sort - no | search line=="*file:*" or line=="*Tool ID:*" or line=="*machineID:*" or line=="*Slot ID:*" or line=="*Lot ID:*" | rex field=line ".*\\data\\(?<MODULE_ID>\S+)\\DataLog.*" | rex field=line ".*Recipe:(?<RECIPE_ID>.*)" | rex field=line ".*Tool ID:(?<EQP_ID>.*)" | rex field=line ".*Lot ID:(?<LOT_ID>.*)" | rex field=line ".*Slot ID:(?<SLOT_ID>.*)" | evtctxadd topic=MODULE_ID key=_table timeout=5m isnotnull(MODULE_ID) | evtctxadd topic=RECIPE_ID key=_table timeout=5m isnotnull(RECIPE_ID) | evtctxadd topic=EQP_ID key=_table timeout=5m isnotnull(EQP_ID) | evtctxadd topic=LOT_ID key=_table timeout=5m isnotnull(LOT_ID) | evtctxadd topic=SLOT_ID key=_table timeout=5m isnotnull(SLOT_ID) | evalc dummy2 = if(isnotnull(MODULE_ID), evtctxsetvar("MODULE_ID", _table, "MODULE_ID", MODULE_ID), null) | evalc dummy2 = if(isnotnull(RECIPE_ID), evtctxsetvar("RECIPE_ID", _table, "RECIPE_ID", RECIPE_ID), null) | evalc dummy2 = if(isnotnull(EQP_ID), evtctxsetvar("EQP_ID", _table, "EQP_ID", EQP_ID), null) | evalc dummy2 = if(isnotnull(LOT_ID), evtctxsetvar("LOT_ID", _table, "LOT_ID", LOT_ID), null) | evalc dummy2 = if(isnotnull(SLOT_ID), evtctxsetvar("SLOT_ID", _table, "SLOT_ID", SLOT_ID), null) | eval MODULE_ID = evtctxgetvar("MODULE_ID", _table, "MODULE_ID") | eval RECIPE_ID = evtctxgetvar("RECIPE_ID", _table, "RECIPE_ID") | eval EQP_ID = evtctxgetvar("EQP_ID", _table, "EQP_ID") | eval LOT_ID = evtctxgetvar("LOT_ID", _table, "LOT_ID") | eval SLOT_ID = evtctxgetvar("SLOT_ID", _table, "SLOT_ID") | fields - line, _time, _table, _id, no | search isnotnull(MODULE_ID) and isnotnull(RECIPE_ID) and isnotnull(EQP_ID) and isnotnull(LOT_ID) and isnotnull(SLOT_ID) | limit 1 | eval key = 1  ]  | fields EQP_ID, MODULE_ID, RECIPE_ID, LOT_ID, SLOT_ID, PARAM_NAME, PARAM_VALUE, MSEC |# search PARAM_NAME == "CurrentStepNumber" |# search PARAM_NAME =="CurrentStepNumber"



import groovy.transform.CompileStatic;
import org.araqne.logdb.groovy.GroovyParserScript;

@CompileStatic
class NamedParser extends GroovyParserScript {
  
  int startRow = 10000;
  int headerIndex = -1;
  int currentStepNumberIndex = 0;
  int index = 0;
  int headerSize = 0;
  int lineDataSize = 0;
  boolean once = true;
  
  String[] header;
  String[] currentStepNumber = new String[10000];
  String msec = "_msec=";
  String at = "@";
  String equal = "=";
  
  String lotId = "";
  
  boolean lotCheck = false;
  boolean slotCheck = false;
  
  public Map<String, Object> parse(Map<String, Object> params) {
	
	String line = params.get("line");
	
	
	
	if(line.contains("HistoricalData:")){
		startRow = index + 2;
		headerIndex = index + 1;
		
	}
		
	if(index == headerIndex) {
		header = line.split("\t");
		headerSize = header.size();
		lineDataSize = headerSize*2;
		
		for(int i=0; i<header.size();i++){
			if(header[i].equals("CurrentStepNumber")){
				currentStepNumberIndex = i;
				break;
			}
		}
	}
	
	if(index > startRow){
		String[] line_data = line.split("\t");
		String[] merged_line = new String[150];
		if(line_data != null && line_data.size() > 0) {
			StringBuilder merged = new StringBuilder();
			
			int j = line_data.size();
			for(int i=0; i < j; i++ ){
				if(line_data[i].contains("---")) continue;
				if(i%2 == 0){
					//params.put(header[i/2] + "__TIME", line_data[i]);
					//line_data[i] = header[i/2] + "_msec=" + line_data[i];
					merged.append(line_data[i]);
				}else{
					//params.put(header[i/2], line_data[i]);
					//line_data[i] =  header[i/2] + "=" + line_data[i];
					merged.append(at);
					merged.append(header[i/2]);
					merged.append(equal);
					merged.append(line_data[i]);
					merged_line[i/2] = merged.toString();
					merged.setLength(0);
					
				}
								
				//if(i==((currentStepNumberIndex*2)-1)){
				//	currentStepNumber[i] = line_data[i];
				//}
			}
			//params.put("PARAM_NAME", Arrays.toString(line_data));
			params.put("MERGED_PARAM", Arrays.toString(merged_line));
		}
	}
	index++;
	//if(header != null){
		//params.put("header", Arrays.toString(header));
		//once = false;
	//}
	//params.put("CRITERIA", Arrays.toString(currentStepNumber));
	//params.put("line_data_size", lineDataSize);
	params.put("index", index);
	//params.put("startRow", startRow);
	return params;
  }
}
